/*
 * VentanaPrincipal.java
 *
 * Created on April 9, 2008, 4:49 PM
 */
package eps.catan.gui;

import eps.Util;
import eps.catan.JugadorCatan;
import eps.catan.TableroCatan;
import eps.multij.AccionGuarda;
import eps.multij.AccionGuarda;
import eps.multij.AccionGuarda;
import eps.multij.Juego;
import eps.multij.Jugador;
import eps.multij.JugadorAleatorio;
import eps.multij.gui.ConsolaGrafica;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.*;

/**
 *
 * @author  mfreire
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private Juego juego;
    private ConsolaGrafica[] consolas = new ConsolaGrafica[4];
    
    /** Creates new form VentanaPrincipal */
    public VentanaPrincipal() {
        initComponents();   
        setTitle("EPS Catan - P4");
    }

    private void inicializaJuego(TableroCatan t) {
        int n = (t == null) ? 3 : t.getNumJugadores();
        DialogoNuevaPartida nueva = 
                new DialogoNuevaPartida(this, "Nueva Partida", n, t != null);        
        nueva.setVisible(true);
        
        if ( ! nueva.isAceptado()) return;
        
        PanelJugador pj[] = nueva.getDatosJugadores();
        
        // crea jugadores
        ArrayList<Jugador> jugadores = new ArrayList<Jugador>();
        int humanos = 0;
        int remotos = 0;
        for (int i=0; i<pj.length; i++) {
            if (pj[i].isAutomatico()) {
                jugadores.add(new JugadorAleatorio(pj[i].getNombre()));
            }
            else if (pj[i].isRemoto()) {
                jugadores.add(nueva.getRemoto(remotos ++));
            }
            else {
                if (consolas[humanos] == null || ! consolas[humanos].isValid()) {
                    consolas[humanos] = new ConsolaGrafica(new InterfazCatan(), false);
                }
                jugadores.add(new JugadorCatan(pj[i].getNombre(), consolas[i]));
                JDialog jd = new JDialog(this, pj[i].getNombre(), false);
                jd.add(consolas[humanos]);
                jd.setSize(1000+humanos*60,600+humanos*60);
                jd.setVisible(true);
                humanos ++;
            }
        }
        
        // elimina ventanas sobrantes
        if (humanos > 0) {
            for (int i=humanos; i<consolas.length; i++) {
                if (consolas[i] != null) {
                    Component c = consolas[i].getParent();
                    while ( ! (c instanceof JDialog)) c = c.getParent();
                    ((JDialog)c).dispose();
                    consolas[i] = null;
                }                
            }
        }
        
        // crea el nuevo juego, con ventanas y todo
        if (t == null) {
            t = new TableroCatan(pj.length);
        }
        juego = new Juego(t, jugadores);
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiNueva = new javax.swing.JMenuItem();
        jmiJugarEnRed = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jmiSalvar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jmiSalida = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiAyuda = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jmiAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Archivo");

        jmiNueva.setText("Nueva Partida ...");
        jmiNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNuevaActionPerformed(evt);
            }
        });
        jMenu1.add(jmiNueva);

        jmiJugarEnRed.setText("Jugar en Red ...");
        jmiJugarEnRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiJugarEnRedActionPerformed(evt);
            }
        });
        jMenu1.add(jmiJugarEnRed);

        jmiCargar.setText("Cargar ...");
        jmiCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCargar);

        jmiSalvar.setText("Salvar ...");
        jmiSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalvarActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalvar);
        jMenu1.add(jSeparator1);

        jmiSalida.setText("Salir");
        jmiSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalidaActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalida);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jmiAyuda.setText("Ayuda");
        jmiAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAyudaActionPerformed(evt);
            }
        });
        jMenu2.add(jmiAyuda);
        jMenu2.add(jSeparator2);

        jmiAcercaDe.setText("Acerca De");
        jmiAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAcercaDeActionPerformed(evt);
            }
        });
        jMenu2.add(jmiAcercaDe);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jmiAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAcercaDeActionPerformed
      
        JLabel jl = new JLabel("<html><center>" +
                "<h1>EPS Catan</h1><br>" +
                "<h3>Escuela Polit&eacute;cnica Superior</h3><br>" +
                "Universidad Aut√≥noma de Madrid<br>" +
                "<b>2007-2008</b></center></html>");
        JOptionPane.showMessageDialog(this, jl);        
        
    }//GEN-LAST:event_jmiAcercaDeActionPerformed

    private void jmiAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAyudaActionPerformed
                
        try {
            JDialog jd = new JDialog(this, "Reglas del juego", false);
            java.net.URL url = getClass().getClassLoader().getResource("html/rules.html");
            JEditorPane htmlPane = new JEditorPane(url);
            htmlPane.setEditable(false);
            jd.add(new JScrollPane(htmlPane));
            jd.setVisible(true);
            jd.setSize(600,800);
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jmiAyudaActionPerformed
    
    private void jmiNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNuevaActionPerformed
        
        inicializaJuego(null);
        
    }//GEN-LAST:event_jmiNuevaActionPerformed

    private void jmiCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarActionPerformed
    
        JFileChooser jfc = new JFileChooser();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            if (f != null) {
                try {
                    TableroCatan t = new TableroCatan(3);
                    t.inicializa(Util.leeFicheroACadena(f));
                    inicializaJuego(t);
                } catch (IOException ex) {
                    System.err.println("Error cargando fichero: " + f.getAbsolutePath());
                }
            }
        }
    }//GEN-LAST:event_jmiCargarActionPerformed

    private void jmiSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalvarActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            if (f != null && juego != null) {
                AccionGuarda a = new AccionGuarda(0, f.getAbsolutePath());
                juego.realizaAccion(a);
            }
        }
    }//GEN-LAST:event_jmiSalvarActionPerformed

    private void jmiSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalidaActionPerformed
        System.exit(0);        
    }//GEN-LAST:event_jmiSalidaActionPerformed

    private void jmiJugarEnRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiJugarEnRedActionPerformed
        String r = JOptionPane.showInputDialog(this, 
                "Introduce la IP del servidor, el nombre de la partida, y tu nombre de jugador", 
                "//127.0.0.1/p b");
        if (r != null && r.split(" ").length == 2) {
            String ip = r.split(" ")[0].trim();
            String nombre = r.split(" ")[1].trim();
            ConsolaGrafica cg = new ConsolaGrafica(new InterfazCatan(), false);
            JugadorCatan jc = new JugadorCatan(nombre, cg);
            try {
                PartidaRemota pr = (PartidaRemota)java.rmi.Naming.lookup(ip);
                pr.entrarEnPartida(jc);
                JDialog jd = new JDialog(this, false);
                jd.add(cg);
                jd.setSize(1000,800);
                jd.setVisible(true);
            } catch(RemoteException e){
                System.out.println("RE registrandose en partida remota");            
                e.printStackTrace();
            } catch(MalformedURLException mue){
                System.out.println("MalFormedURLException en lookup.");
            } catch(NotBoundException nbe) {
                System.out.println("NotBoundException en lookup.");
            }
        }
    }//GEN-LAST:event_jmiJugarEnRedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem jmiAcercaDe;
    private javax.swing.JMenuItem jmiAyuda;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiJugarEnRed;
    private javax.swing.JMenuItem jmiNueva;
    private javax.swing.JMenuItem jmiSalida;
    private javax.swing.JMenuItem jmiSalvar;
    // End of variables declaration//GEN-END:variables
}
