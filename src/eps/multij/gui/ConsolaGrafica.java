/*
 * ConsolaGrafica.java
 *
 * Created on February 11, 2007, 6:52 PM
 */

package eps.multij.gui;

import eps.catan.gui.*;
import eps.Util;
import eps.catan.JugadorCatan;
import eps.multij.Evento;
import eps.multij.JugadorConsola;
import eps.multij.Juego;
import eps.multij.JuegoRemoto;
import eps.multij.Jugador;
import java.awt.Point;
import java.rmi.RemoteException;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JFrame;

/**
 * Una consola grafica.
 */
public class ConsolaGrafica extends javax.swing.JPanel implements JugadorConsola.Consola {

    private JuegoRemoto j;
    private InterfazTablero it;    
    
    /**
     * Crea una nueva consola grafica, con el Juego suministrado
     * (Debe haber uno o mas JugadorConsola implementados, que son los que interpretan
     * instrucciones de la linea de entraeda).
     */
    public ConsolaGrafica(InterfazTablero it) {
        this(it, true);
    }
    
    public ConsolaGrafica(InterfazTablero it, boolean enVentanaIndependiente) {
        initComponents();
        this.it = it;
        jpSuperior.add((JComponent)it);     
        
        if (enVentanaIndependiente) {
            JFrame jf = new JFrame("Practica 2 de POO");
            jf.setIconImage(Util.getImage("eps/catan/gui/celdas/poblado.png"));
            jf.getContentPane().add(this);
            jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            jf.setSize(1000,800);        
            // jf.setLocation(1600,30);
            jf.setVisible(true); 
        }

        jSplitPane1.setDividerLocation(1.0);       
    }
    
    public void setJuego(JuegoRemoto j) {        
        throw new IllegalArgumentException("Usa 'setJuego(Juego j, Jugador jc'");
    }
    
    /**
     * Cambia el juego al que se esta jugando
     */
    public void setJuego(JuegoRemoto j, Jugador jc) {
        this.j = j;    
        ArrayList<Jugador> al = new ArrayList<Jugador>();
        al.add(jc);
        it.setJuego(j, al);
    }
    
    /**
     * Devuelve el juego actual
     */
    public JuegoRemoto getJuego() {
        return(j);
    }
    
    /**
     * Repinta la consola; debe llamarse cada vez que se realiza un cambio en el tablero.
     * Si se ha cambiado todo el tablero (por ejemplo, se ha empezado una partida nueva),
     * debe haberse llamado antes a setTablero().
     */
    public void actualiza(Evento e) {
        it.actualiza(e);
    }            

    /**
     * Escribe algo a la zona de salida; para generar nuevas lineas, usa
     * "\n".
     */
    public void muestraTexto(String txt) {
        jtaSalida.append(txt);
    }    
    
    /**
     * Cierra la ventana y la aplicacion. Sencillo, pero un poco feo (no sirve si
     * hay mas de una ventana, por motivos evidentes).
     */
    public void cierraVentana() {
        System.exit(0);
    }
        
    /**
     * Procesa un evento de texto (texto introducido + enter o click en boton)
     */
    private void procesaEventoTexto() {
        try {
        String text = jtEntrada.getText();
        int pos = jtaSalida.getText().length();
        jtaSalida.insert(">" + text + "\n", pos);
        JugadorConsola jc = (JugadorConsola)j.getJugador(j.getTablero().getTurno());
        if (jc.ejecuta(text)) {
            jtEntrada.setText("");   
        }
        else {
            System.err.println("Error con '"+text+"'");
        }        
        
        // hace "scroll" para mostrar la linea recien escrita
        jspSalida.getViewport().setViewPosition(new Point(
                0, (int)jtaSalida.getSize().getHeight()-1)
            );
        } catch (RemoteException re) {
            re.printStackTrace();
        }        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jpInferior = new javax.swing.JPanel();
        jtEntrada = new javax.swing.JTextField();
        jbConfirmacion = new javax.swing.JButton();
        jspSalida = new javax.swing.JScrollPane();
        jtaSalida = new javax.swing.JTextArea();
        jpSuperior = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(600);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setLastDividerLocation(600);
        jSplitPane1.setOneTouchExpandable(true);

        jpInferior.setLayout(new java.awt.GridBagLayout());

        jtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtEntradaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jpInferior.add(jtEntrada, gridBagConstraints);

        jbConfirmacion.setText("  !  ");
        jbConfirmacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConfirmacionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jpInferior.add(jbConfirmacion, gridBagConstraints);

        jtaSalida.setColumns(20);
        jtaSalida.setRows(5);
        jspSalida.setViewportView(jtaSalida);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jpInferior.add(jspSalida, gridBagConstraints);

        jSplitPane1.setBottomComponent(jpInferior);

        jpSuperior.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(jpSuperior);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jbConfirmacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConfirmacionActionPerformed
// TODO add your handling code here:
        procesaEventoTexto();
    }//GEN-LAST:event_jbConfirmacionActionPerformed

    private void jtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtEntradaActionPerformed
// TODO add your handling code here:
        procesaEventoTexto();
    }//GEN-LAST:event_jtEntradaActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbConfirmacion;
    private javax.swing.JPanel jpInferior;
    private javax.swing.JPanel jpSuperior;
    private javax.swing.JScrollPane jspSalida;
    private javax.swing.JTextField jtEntrada;
    private javax.swing.JTextArea jtaSalida;
    // End of variables declaration//GEN-END:variables
    
}
